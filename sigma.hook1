if not game:IsLoaded() then
    game.Loaded:Wait()
end

local players       = game:GetService('Players')
local localPlayer   = players.LocalPlayer
if not localPlayer then
    players:GetPropertyChangedSignal('LocalPlayer'):Wait()
    localPlayer = players.LocalPlayer
end

local executor      = identifyexecutor and identifyexecutor() or 'Unknown'

local messagebox    = messagebox
local request       = request or http_request
local loadstring    = loadstring

if type(messagebox) ~= 'function' then
    return localPlayer:Kick('[sigma.hook] missing alias ( messagebox ) - unsupported executor')
end

local protectedMessagebox = function(body, title, id)
    local success, output = pcall(messagebox, body, title, id)
    if not success then
        localPlayer:Kick(`[sigma.hook] messagebox_error - {body}`)
        task.wait(9e9)
        return
    end
    return output
end

local protectedLoad = function(url)
    local success, response = pcall(request, {Url=url; Method='GET'})
    if not success then
        protectedMessagebox(`protectedLoad failed(1) - request error\n\nurl: {url}`, `sigma.hook [{executor}]`, 48)
        task.wait(9e9)
        return
    elseif type(response) ~= 'table' or type(response.Body) ~= 'string' or response.StatusCode ~= 200 then
        protectedMessagebox(`protectedLoad failed(2) - bad response\n\nurl: {url}`, `sigma.hook [{executor}]`, 48)
        task.wait(9e9)
        return
    end
    local loader = loadstring(response.Body)
    if not loader then
        protectedMessagebox(`protectedLoad failed(3) - syntax error\n\nurl: {url}`, `sigma.hook [{executor}]`, 48)
        task.wait(9e9)
        return
    end
    return loader()
end

if type(loadstring) ~= 'function' then
    return protectedMessagebox(`missing alias ( loadstring ) - unsupported executor`, `sigma.hook [{executor}]`, 48)
elseif type(request) ~= 'function' then
    return protectedMessagebox(`missing alias ( request ) - unsupported executor`, `sigma.hook [{executor}]`, 48)
elseif not Drawing then
    protectedLoad('https://raw.githubusercontent.com/Alexand4r16/Sigma_Hook/refs/heads/main/Sigma_Hook')
end

local dir = 'https://raw.githubusercontent.com/Alexand4r16/Sigma_Hook/refs/heads/main/Sigma_Hook'

local statuslist = {}

statuslist.fallensurvival = {
    name    = 'Fallen Survival',
    status  = 'Undetected',
    support = {'Wave', 'AWP', 'Swift'}
}

local load = function(name)
    local game = statuslist[name]
    if game.status ~= 'Undetected' and protectedMessagebox(`{game.name} is Currently Marked as {game.status}!\n\nAre You Sure You Want to Continue?`, `sigma.hook`, 52) ~= 6 then
        return
    elseif (
        game.support and 
        not table.find(game.support, executor) and 
        protectedMessagebox(`Unsupported Executor!\n\n{executor} is not Officially Supported for {game.name}\nand may have Undefined Behaviour or even result in a BAN!\n\nAre You Sure You Want to Continue?`, `sigma.hook [{executor}]`, 52) ~= 6
    ) then
        return
    end
    protectedLoad(`{dir}`)
end

-- Load for all places by default
load('fallensurvival')
